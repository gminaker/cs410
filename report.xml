<crap_result>
  <project>
    /Users/bobevans/Documents/projects/crap4jwebinar/BancoAgitar
  </project>
  <project_id>
    1196722797704
  </project_id>
  <timestamp>
    12/3/07 4:51 PM
  </timestamp>
  <classDirectories>
    <classDirectory>
      /Users/bobevans/Documents/projects/crap4jwebinar/BancoAgitar/bin
    </classDirectory>
  </classDirectories>
  <testClassDirectories>
    <testClassDirectory>
      /Users/bobevans/Documents/projects/crap4jwebinar/BancoAgitar/bin
    </testClassDirectory>
  </testClassDirectories>
  <sourceDirectories>
    <sourceDirectory>
      /Users/bobevans/Documents/projects/crap4jwebinar/BancoAgitar/src
    </sourceDirectory>
    <sourceDirectory>
      /Users/bobevans/Documents/projects/crap4jwebinar/BancoAgitar/agitar/test
    </sourceDirectory>
  </sourceDirectories>
  <libClasspaths>
    <libClasspath>
      /BancoAgitar
    </libClasspath>
    <libClasspath>
      /Users/bobevans/Applications/eclipse3.3.1.1/plugins/org.junit_3.8.2.v200706111738/junit.jar
    </libClasspath>
    <libClasspath>
      /Users/bobevans/Applications/eclipse3.3.1.1/plugins/com.agitar.eclipse.api_2.1.1.000614/com.agitar.mockingbird.jar
    </libClasspath>
    <libClasspath>
      /Users/bobevans/Applications/eclipse3.3.1.1/plugins/com.agitar.eclipse.api_2.1.1.000614/lib/ext/org.agitar.mock5.jar
    </libClasspath>
  </libClasspaths>
  <stats>
    <name>
      Method Crap Stats
    </name>
    <totalCrap>
      122.70
    </totalCrap>
    <crap>
      2.56
    </crap>
    <median>
      2.00
    </median>
    <average>
      2.56
    </average>
    <stdDev>
      3.11
    </stdDev>
    <methodCount>
      48
    </methodCount>
    <crapMethodCount>
      0
    </crapMethodCount>
    <crapMethodPercent>
      0.00
    </crapMethodPercent>
    <crapLoad>
      0
    </crapLoad>
    <crapThreshold>
      30
    </crapThreshold>
    <globalAverage>
      4.14
    </globalAverage>
    <globalCraploadAverage>
      -1.00
    </globalCraploadAverage>
    <globalCrapMethodAverage>
      -1.00
    </globalCrapMethodAverage>
    <globalTotalMethodAverage>
      -1.00
    </globalTotalMethodAverage>
    <globalAverageDiff>
      -1.59
    </globalAverageDiff>
    <globalCraploadAverageDiff>
      1.00
    </globalCraploadAverageDiff>
    <globalCrapMethodAverageDiff>
      1.00
    </globalCrapMethodAverageDiff>
    <globalTotalMethodAverageDiff>
      49.00
    </globalTotalMethodAverageDiff>
    <shareStatsUrl>
      http://www.crap4j.org/benchmark/stats/new?stat[project_hash]=1196722797704&amp;stat[project_url]=BancoAgitar&amp;stat[crap]=0.00&amp;stat[crap_load]=0&amp;stat[crap_methods]=0&amp;stat[total_methods]=48&amp;stat[ones]=16&amp;stat[twos]=28&amp;stat[fours]=2&amp;stat[eights]=1&amp;stat[sixteens]=1&amp;stat[thirtytwos]=0&amp;stat[sixtyfours]=0&amp;stat[one28s]=0&amp;stat[two56s]=0
    </shareStatsUrl>
    <histogram>
      <hist>
        <place>
          one
        </place>
        <value>
          16
        </value>
        <height>
          97.14px
        </height>
      </hist>
      <hist>
        <place>
          two
        </place>
        <value>
          28
        </value>
        <height>
          170.00px
        </height>
      </hist>
      <hist>
        <place>
          four
        </place>
        <value>
          2
        </value>
        <height>
          28.00px
        </height>
      </hist>
      <hist>
        <place>
          eight
        </place>
        <value>
          1
        </value>
        <height>
          28.00px
        </height>
      </hist>
      <hist>
        <place>
          sixteen
        </place>
        <value>
          1
        </value>
        <height>
          28.00px
        </height>
      </hist>
      <hist>
        <place>
          thirtytwo
        </place>
        <value>
          0
        </value>
        <height>
          0.00px
        </height>
      </hist>
      <hist>
        <place>
          sixtyfour
        </place>
        <value>
          0
        </value>
        <height>
          0.00px
        </height>
      </hist>
      <hist>
        <place>
          one28
        </place>
        <value>
          0
        </value>
        <height>
          0.00px
        </height>
      </hist>
      <hist>
        <place>
          two56
        </place>
        <value>
          0
        </value>
        <height>
          0.00px
        </height>
      </hist>
    </histogram>
  </stats>
  <methods>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        BancoAgitar
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        BancoAgitar
      </className>
      <methodName>
        addCheckingAccount
      </methodName>
      <methodSignature>
        (Ljava/lang/String;Ljava/lang/String;D)V
      </methodSignature>
      <fullMethod>
        public  void addCheckingAccount(java.lang.String, java.lang.String, double)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        BancoAgitar
      </className>
      <methodName>
        createNewAccountNumber
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        private  java.lang.String createNewAccountNumber()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        BancoAgitar
      </className>
      <methodName>
        getNumberOfAccounts
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int getNumberOfAccounts()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        BancoAgitar
      </className>
      <methodName>
        withdraw
      </methodName>
      <methodSignature>
        (Ljava/lang/String;D)V
      </methodSignature>
      <fullMethod>
        public  void withdraw(java.lang.String, double)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        BancoAgitarException
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(java.lang.String)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        Branch
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        CheckingAccount
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;D)V
      </methodSignature>
      <fullMethod>
        protected  void &lt;init&gt;(java.lang.String, java.lang.String, java.lang.String, double)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        CheckingAccount
      </className>
      <methodName>
        branchWithReserve
      </methodName>
      <methodSignature>
        (DLjava/util/List&lt;Lbancoagitar/Branch;&gt;;)Lbancoagitar/Branch;
      </methodSignature>
      <fullMethod>
        private  bancoagitar.Branch branchWithReserve(double, java.util.List&lt;bancoagitar.Branch&gt;)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        CheckingAccount
      </className>
      <methodName>
        cashReserves
      </methodName>
      <methodSignature>
        ()D
      </methodSignature>
      <fullMethod>
        private  double cashReserves()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        CheckingAccount
      </className>
      <methodName>
        fillOutFederalFormForLargeCashDeposit
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void fillOutFederalFormForLargeCashDeposit()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        CheckingAccount
      </className>
      <methodName>
        getAccountNumber
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getAccountNumber()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        CheckingAccount
      </className>
      <methodName>
        getBalance
      </methodName>
      <methodSignature>
        ()D
      </methodSignature>
      <fullMethod>
        public  double getBalance()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        CheckingAccount
      </className>
      <methodName>
        getName
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getName()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        CheckingAccount
      </className>
      <methodName>
        getSSN
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getSSN()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        CheckingAccount
      </className>
      <methodName>
        initializeAccount
      </methodName>
      <methodSignature>
        (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;D)V
      </methodSignature>
      <fullMethod>
        private  void initializeAccount(java.lang.String, java.lang.String, java.lang.String, double)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        BancoAgitar
      </className>
      <methodName>
        deposit
      </methodName>
      <methodSignature>
        (Ljava/lang/String;D)V
      </methodSignature>
      <fullMethod>
        public  void deposit(java.lang.String, double)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        BancoAgitar
      </className>
      <methodName>
        getAccountByAccountNumber
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Lbancoagitar/CheckingAccount;
      </methodSignature>
      <fullMethod>
        public  bancoagitar.CheckingAccount getAccountByAccountNumber(java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        BancoAgitar
      </className>
      <methodName>
        getAllAccounts
      </methodName>
      <methodSignature>
        ()[Lbancoagitar/CheckingAccount;
      </methodSignature>
      <fullMethod>
        public  bancoagitar.CheckingAccount[] getAllAccounts()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        BancoAgitar
      </className>
      <methodName>
        getTotalDeposits
      </methodName>
      <methodSignature>
        ()D
      </methodSignature>
      <fullMethod>
        public  double getTotalDeposits()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        BancoAgitar
      </className>
      <methodName>
        toString
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String toString()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        Branch
      </className>
      <methodName>
        hasFunds
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean hasFunds()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        Branch
      </className>
      <methodName>
        transfer
      </methodName>
      <methodSignature>
        (Lbancoagitar/Branch;)Z
      </methodSignature>
      <fullMethod>
        public  boolean transfer(bancoagitar.Branch)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        Branch
      </className>
      <methodName>
        willLoan
      </methodName>
      <methodSignature>
        (D)Z
      </methodSignature>
      <fullMethod>
        public  boolean willLoan(double)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        CheckingAccount
      </className>
      <methodName>
        fundsLockRequest
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        private  boolean fundsLockRequest()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        CheckingAccount
      </className>
      <methodName>
        getBranches
      </methodName>
      <methodSignature>
        ()Ljava/util/List&lt;Lbancoagitar/Branch;&gt;;
      </methodSignature>
      <fullMethod>
        private  java.util.List&lt;bancoagitar.Branch&gt; getBranches()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        CheckingAccount
      </className>
      <methodName>
        markInterest
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void markInterest()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        CheckingAccount
      </className>
      <methodName>
        thisBranch
      </methodName>
      <methodSignature>
        ()Lbancoagitar/Branch;
      </methodSignature>
      <fullMethod>
        private  bancoagitar.Branch thisBranch()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        MathUtils
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        MathUtils
      </className>
      <methodName>
        max
      </methodName>
      <methodSignature>
        (II)I
      </methodSignature>
      <fullMethod>
        public static  int max(int, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        MathUtils
      </className>
      <methodName>
        min
      </methodName>
      <methodSignature>
        (II)I
      </methodSignature>
      <fullMethod>
        public static  int min(int, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        StringUtil
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        Util
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        Util
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        Util
      </className>
      <methodName>
        hardValidateSSN
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void hardValidateSSN(java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        Util
      </className>
      <methodName>
        validateName
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void validateName(java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        Util
      </className>
      <methodName>
        validateSSN
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public static  void validateSSN(java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ssndatabase
      </package>
      <className>
        SSNChecks
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        BancoAgitar
      </className>
      <methodName>
        deleteAccount
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public  void deleteAccount(java.lang.String)
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        CheckingAccount
      </className>
      <methodName>
        validateAll
      </methodName>
      <methodSignature>
        (Ljava/lang/String;Ljava/lang/String;D)V
      </methodSignature>
      <fullMethod>
        private  void validateAll(java.lang.String, java.lang.String, double)
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        CheckingAccount
      </className>
      <methodName>
        validateBalance
      </methodName>
      <methodSignature>
        (D)V
      </methodSignature>
      <fullMethod>
        public  void validateBalance(double)
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        StringUtil
      </className>
      <methodName>
        isNonEmpty
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Z
      </methodSignature>
      <fullMethod>
        public static  boolean isNonEmpty(java.lang.String)
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        CheckingAccount
      </className>
      <methodName>
        withdraw
      </methodName>
      <methodSignature>
        (D)V
      </methodSignature>
      <fullMethod>
        public  void withdraw(double)
      </fullMethod>
      <crap>
        3.18
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        72.73
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ssndatabase
      </package>
      <className>
        SSNChecks
      </className>
      <methodName>
        isValidSSN
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Z
      </methodSignature>
      <fullMethod>
        public static  boolean isValidSSN(java.lang.String)
      </fullMethod>
      <crap>
        3.41
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        64.29
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        BancoAgitar
      </className>
      <methodName>
        transfer
      </methodName>
      <methodSignature>
        (Ljava/lang/String;Ljava/lang/String;D)V
      </methodSignature>
      <fullMethod>
        public  void transfer(java.lang.String, java.lang.String, double)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        CheckingAccount
      </className>
      <methodName>
        deposit
      </methodName>
      <methodSignature>
        (DI)V
      </methodSignature>
      <fullMethod>
        public  void deposit(double, int)
      </fullMethod>
      <crap>
        6.10
      </crap>
      <complexity>
        6
      </complexity>
      <coverage>
        85.71
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        CheckingAccount
      </className>
      <methodName>
        candidate
      </methodName>
      <methodSignature>
        (Lbancoagitar/Branch;D)Z
      </methodSignature>
      <fullMethod>
        private  boolean candidate(bancoagitar.Branch, double)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        bancoagitar
      </package>
      <className>
        CheckingAccount
      </className>
      <methodName>
        borrowFromBranch
      </methodName>
      <methodSignature>
        (DD)V
      </methodSignature>
      <fullMethod>
        private  void borrowFromBranch(double, double)
      </fullMethod>
      <crap>
        20.00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
  </methods>
</crap_result>

